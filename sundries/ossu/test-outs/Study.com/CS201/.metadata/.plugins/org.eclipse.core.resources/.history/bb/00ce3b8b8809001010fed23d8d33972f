
/*
 * The Boyre-Morre Search Utility. This is a simple utility to
 *   apply the 
 */

package assignment;

import java.io.*;
import java.util.*;

public class Program {
	
	private static int SYMBOL_SIZE = 256;

	/*
	 * Entry point of this utility
	 * @param args    command line arguments 
	 *                separated by a space
	 */
	public static void main(String[] args) {
		
		int option;
		Scanner inputMechanism = new Scanner(System.in);
		
		welcome(); 
		printMenu();
		
		boolean done = false;
		while (!done) {
			try {
				String usStatesList = loadList("us_states.txt");
				System.out.print("\nOption: ");
				option = inputMechanism.nextInt(); /* NOTE that typing a non-
				    -integer into the options pane will cause the tool to go into 
				    an infinite loop. Sadly, I do not have the time to fix this. */
				switch (option) {
				case 1: // Display the text
					System.out.println(usStatesList);
					break;
				case 2: // The Boyre-Moore Search
					
					break;
				case 3: // Exit Programme
					inputMechanism.close();
					done = true;
					break;
				default:
					System.out.println("\nSelected option " + option + " does not exist.");
					System.out.println("Here are a list of options:");
					printMenu();
					break;
				}
				
			} catch  (Exception e){
				System.out.println(e.getMessage());
			}
		}
		
		// For debugging purposes:
		// executeCommand("pwd"); // uncomment this to get current directory
		// executeCommand("ls -l"); // uncomment this to list files in current directory
	}
	
	/*
	 * Method to read a text file, and to load its contents into
	 *   a String[] array. The list is read line-by-line, appended
	 *   into a List<String>, and then returned as a string.
	 *   
	 * @param path    the path to the
	 *                list to load.
	 * @returns a String[] array of a list of lines in a text file.
	 */
	public static String loadList(String path) 
		throws FileNotFoundException {
		
		String fileRead = "";
		
		File listFileObject = new File(path);
		Scanner inputMechanism = new Scanner(listFileObject);
		while (inputMechanism.hasNextLine())
			fileRead += inputMechanism.nextLine() + "\n";
			//fileRead += inputMechanism.nextLine();
		inputMechanism.close();
		
		return fileRead;
	} /* loadlist(String) is, to some part, based off of
	     the technique described by w3schools (n.d.). */
	
	/*
	 * Displays a welcome message identifying the name
	 *   of this utility, its purpose, and its author. 
	 */
	private static void welcome() {
		System.out.println("\n===================================================");
		System.out.println("=        Boyer-Moore String Search Utility        =");
		System.out.println("= By Alexander Ahmann <alexander.ahmann@snhu.edu> =");
		System.out.println("===================================================\n");
	}
	
	/*
	 * Displays a menu that informs the end user what
	 *   functions that the utility performs, and maps
	 *   said functions to a number that the end-user
	 *   can select.
	 */
	private static void printMenu() {
		System.out.println("-=-=-=-= OPTIONS =-=-=-=-");
		System.out.println("  1. Display the text");
		System.out.println("  2. Search");
		System.out.println("  3. Exit utility");
	}
	
	/*
	 * This is a method that I for debugging purposes, which executes a 
	 *    command through the UNIX (or Windows?) terminal, and then
	 *    outputs the results of that command. This was partially gen-
	 *    -erated by Google AI (2025). 
	 * 
	 * @param request    the command to execute
	 */
	private static void executeCommand(String request) {
        try {
            Process cmd = Runtime.getRuntime().exec(request);
            BufferedReader output = new BufferedReader(new InputStreamReader(cmd.getInputStream()));
            
            String line;
            while ((line = output.readLine()) != null)
                System.out.println(line);
            cmd.waitFor();
        } catch (Exception e) {
            e.printStackTrace();
        }
	} // NOTE that this method was, in part, generated by Google AI (2025). 

}

/*
 * References
 * 1. Study.com (n.d.). Computer Science 201 - Assignment 2: Searching Text & String Data. Retrieved on Mar. 12, 2025 
 *   from: https://study.com/academy/lesson/computer-science-201-assignment-2-searching-text-string-data.html
 * 2. Wikipedia (c.a. Mar. 11, 2025). List of states and territories of the United States. Retrieved on Mar. 12, 2025
 *   from: https://en.wikipedia.org/w/index.php?title=List_of_states_and_territories_of_the_United_States&oldid=1279977691
 * 3. Google AI (2025) (Mar. 12, 2025 version). Large Language Model. https://google.com/
 * 4. w3schools (n.d.). Java Read Files. Retrieved on Mar. 12, 2025 from:
 *     http://w3schools.com/java/java_files_read.asp
 * 5. "Geeks4Geeks" (Mar. 11, 2024). Boyer Moore Algorithm for Pattern Searching. Retrieved on Mar. 25, 2025 from:
 *    https://www.geeksforgeeks.org/boyer-moore-algorithm-for-pattern-searching/
 * 6. "Geeks4Geeks" (Jan. 4, 2025). Convert a String to Character Array in Java. Retrieved on Mar. 25, 2025 from:
 *    https://www.geeksforgeeks.org/convert-a-string-to-character-array-in-java/
 */